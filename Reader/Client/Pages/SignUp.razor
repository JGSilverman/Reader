@page "/signup"

@using Reader.Client.Helpers
@using Reader.Client.Services
@using Reader.Shared

@inject IServiceScopeFactory _serviceScopeFactory
@inject NavigationManager _navManager
@inject AuthStateProvider _authStateProvider
@inject SpinnerService _spinner

<div class="container-fluid row mt-5">
    <div class="col-lg-6 offset-lg-3 col-sm-12">
        <RadzenCard>
            <RadzenText TextStyle=TextStyle.H6 Text="Sign Up" />
            <EditForm Model="@_userForAuthentication" OnValidSubmit="@HandleOnValidSubmit">
                <DataAnnotationsValidator />

                <div class="my-2">
                    <RadzenTextBox class="w-100 mt-3" Placeholder="Email" @bind-Value="@(_userForAuthentication.Email)"></RadzenTextBox>
                    <ValidationMessage For="@(() => _userForAuthentication.Email)" />
                </div>

                <div class="my-2">
                    <RadzenPassword class="w-100 mt-3" Placeholder="Password" @bind-Value="@(_userForAuthentication.Password)" />
                    <ValidationMessage For="@(() => _userForAuthentication.Password)" />
                    @if (_passwordErrors.Any())
                    {
                        foreach (var err in _passwordErrors)
                        {
                            <div class="text-danger my-1">@err.Message</div>
                        }
                    }
                </div>

                <div class="rz-p-12 rz-text-align-center">
                    <RadzenCheckBox @bind-Value=@_userForAuthentication.TermsAgreedTo Name="TermsAgreedTo" />
                    <RadzenLabel Text="Agree to Terms and Conditions" Component="TermsAgreedTo" Style="margin-left: 8px; vertical-align: middle;" />
                </div>

                <RadzenButton class="mt-4 btn-block"
                              ButtonStyle="ButtonStyle.Primary"
                              ButtonType="Radzen.ButtonType.Submit"
                              Text="Sign Up"
                              IsBusy=@_btnIsBusy
                              Disabled=@(string.IsNullOrEmpty(_userForAuthentication.Email) ||
                              string.IsNullOrEmpty(_userForAuthentication.Password) ||
                              !_userForAuthentication.TermsAgreedTo)>
                </RadzenButton>
            </EditForm>
        </RadzenCard>
    </div>
</div>

<div class="d-flex justify-content-center mt-2">
    <a href="/resendemailconfirmation" class="d-block">Resend Email confirmation</a>
</div>
<div class="d-flex justify-content-center mt-2">
    <a href="/forgotpassword" class="mt-2 d-block">Forgot Password</a>
</div>

@code {
    AuthDto _userForAuthentication = new AuthDto();
    bool _showServerError { get; set; }
    string? _serverErrorMessage { get; set; }
    List<FormError> _passwordErrors { get; set; } = new();
    bool _btnIsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task HandleOnValidSubmit()
    {
        _showServerError = false;
        _serverErrorMessage = null;
        _passwordErrors.Clear();

        ValidatePassword();

        if (_passwordErrors.Any()) return;

        try
        {
            _btnIsBusy = true;
            _spinner.Show();
            var result = await _authStateProvider.Register(_userForAuthentication);
            if (result.IsAuthSuccessful)
            {
                _navManager.NavigateTo("/");
            }
            else
            {
                _serverErrorMessage = result.ErrorMessage;
                _showServerError = true;
            }
        }
        catch (Exception ex)
        {
            _serverErrorMessage = ex.Message;
            _showServerError = true;
        }
        finally
        {
            _spinner.Hide();
            _btnIsBusy = false;
        }
    }

    void ValidatePassword()
    {
        char[] SpecialChars = "!@#$%^&*()".ToCharArray();

        if (!_userForAuthentication.Password.Any(char.IsDigit))
        {
            _passwordErrors.Add(new FormError
                {
                    Key = "Password",
                    Message = "Password needs at least one number."
                });
        }

        if (!_userForAuthentication.Password.Any(char.IsUpper))
        {
            _passwordErrors.Add(new FormError
                {
                    Key = "Password",
                    Message = "Password needs at least one uppercase letter."
                });
        }

        int indexOf = _userForAuthentication.Password.IndexOfAny(SpecialChars);
        if (indexOf == -1)
        {
            _passwordErrors.Add(new FormError
                {
                    Key = "Password",
                    Message = "Password needs at least one special character."
                });
        }
    }
}